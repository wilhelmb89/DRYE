{%- comment -%}theme-check-disable ImgLazyLoading{%- endcomment -%}
{% doc %}
  Renders an image with responsive srcset, lazy loading, and other configurable options.

  @param {object} image - Image object
  @param {object} [mobile_image] - Optional image object for mobile displays
  @param {string} [widths] - Comma separated list of image widths for srcset attribute
  @param {string} [mobile_widths] - Comma separated list of image widths for mobile source tag
  @param {number} [quality] - Relative quality of image to load (0-1). Higher is sharper but larger
  @param {number} src_width - Width for src attribute
  @param {boolean} [srcset_2x] - Whether srcset should only be 2x version of src_width
  @param {boolean} [src_placeholder] - Add blank src placeholder for lazy loading
  @param {string} [sizes] - Content for sizes attribute
  @param {boolean} [lazy_load] - Whether image should lazy load
  @param {string} [class] - Class name(s) for class attribute
  @param {string} [attributes] - Additional HTML attributes
  @param {string} [alt_text] - Custom text for alt attribute
  @param {boolean} [disable_focal_point] - Disables focusing on a spot in the image
  @param {string} [focal_alignment] - Focal point alignment
  @param {number} [section_index] - If passed, prevents lazy load if first section
  @param {string} [lazy_type] - When to load image: 'dom', 'load', or 'manual'

  @example
  {% render 'image',
    image: image,
    widths: '480, 640, 960, 1280',
    src_width: 1280,
    sizes: sizes,
    class: 'img-fit'
  %}
{% enddoc %}

{%- liquid
  if srcset_2x
    assign image_width = src_width
    assign src_width_2x = src_width | times: 2

    if image.width >= src_width_2x
      capture srcset
        echo image | image_url: width: src_width | append: ', '
        echo image | image_url: width: src_width_2x | append: ' 2x'
      endcapture

      assign src_width = src_width_2x
      assign image_width = src_width_2x
    endif
  else
    assign input_srcset = widths | remove: ' ' | split: ','

    for size in input_srcset
      assign size_int = size | times: 1

      if forloop.first and image.width < size_int
        assign output_srcset = image.width
        break
      endif

      if image.width >= size_int
        unless forloop.first
          assign output_srcset = output_srcset | append: ','
        endunless

        assign output_srcset = output_srcset | append: size
      else
        break
      endif
    endfor

    assign output_srcset = output_srcset | split: ','

    unless quality
      assign quality = 1
    endunless

    for size in output_srcset
      capture srcset
        echo srcset
        unless forloop.first
          echo ', '
        endunless
        assign output_image_width = size | times: quality
        echo image | image_url: width: output_image_width | append: ' ' | append: size | append: 'w'
      endcapture

      if forloop.last
        assign image_width = output_image_width
      endif
    endfor

    if mobile_widths or mobile_image
      unless mobile_widths
        assign mobile_widths = widths
      endunless
      unless mobile_image
        assign mobile_image = image
      endunless

      assign mobile_input_srcset = mobile_widths | remove: ' ' | split: ','

      for size in mobile_input_srcset
        assign size_int = size | times: 1

        if forloop.first and mobile_image.width < size_int
          assign mobile_output_srcset = mobile_image.width
          break
        endif

        if mobile_image.width >= size_int
          unless forloop.first
            assign mobile_output_srcset = mobile_output_srcset | append: ','
          endunless

          assign mobile_output_srcset = mobile_output_srcset | append: size
        else
          break
        endif
      endfor

      assign mobile_output_srcset = mobile_output_srcset | split: ','

      for size in mobile_output_srcset
        capture mobile_srcset
          echo mobile_srcset
          unless forloop.first
            echo ', '
          endunless
          echo mobile_image | image_url: width: size | append: ' ' | append: size | append: 'w'
        endcapture

        if forloop.last
          assign mobile_image_width = size
        endif
      endfor
    endif
  endif

  assign image_height = image_width | divided_by: image.aspect_ratio | round
  assign js_class = class

  unless lazy_load == false or section_index == 1
    assign lazy_load = true

    if class
      assign js_class = class | append: ' no-js-hidden'
    else
      assign js_class = 'no-js-hidden'
    endif
  endunless

  assign disable_focal_point = disable_focal_point | default: false
  assign focal_alignment = focal_alignment | default: image.presentation.focal_point
-%}

{%- capture placeholder_image -%}
    data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20{{ image_width }}%20{{ image_height }}'%3E%3C/svg%3E
  {%- endcapture -%}

{%- if image and src_width -%}
  {%- if mobile_srcset -%}
    <picture>
      <source
        {% if lazy_load %}
          data-
        {%- endif -%}
        srcset="{{ mobile_srcset }}"
        {% if lazy_load %}
          data-
        {%- endif -%}
        src="{{ mobile_image | image_url: width: mobile_image_width }}"
        media="(max-width: 850px)"
        width="{{ mobile_image_width }}"
        height="{{ mobile_image_width | divided_by: image.aspect_ratio | round }}"
      >
  {%- endif -%}

  <img
    {% if srcset %}
      {%- if lazy_load %}data-{% endif -%}
      srcset="{{ srcset }}"
    {% endif -%}
    {% if sizes and srcset %}
      sizes="{{ sizes }}"
    {% endif -%}
    {% if lazy_load %}
      data-
    {%- endif -%}
    src="{{ image | image_url: width: src_width }}"
    {% if lazy_load and src_placeholder %}
      src="{{ placeholder_image }}"
    {% endif -%}
    {% if js_class %}
      class="{{ js_class }}"
    {% endif -%}
    {% if attributes %}
      {{- attributes }}
    {% endif -%}
    {%- if lazy_type and lazy_load -%}
      data-load-{{ lazy_type }}
    {%- endif -%}

    {% if focal_alignment and disable_focal_point == false %}
      style="
        --focal-alignment: {{ focal_alignment }};
        object-position: {{ focal_alignment }};
      "
    {% endif -%}

    loading="{% if lazy_load %}lazy{% else %}eager{% endif %}"
    width="{{ image_width }}"
    height="{{ image_height }}"
    alt="{{ alt_text | default: image.alt | escape }}"
    {%- unless lazy_load -%}
      fetchpriority="high"
    {%- endunless -%}
    onload="javascript: this.closest('.image')?.classList.add('loaded')"
  >

  {%- if mobile_srcset -%}
    </picture>
  {%- endif -%}

  {%- if lazy_load -%}
    <noscript>
      <img
        src="{{ image | image_url: width: src_width }}"
        loading="{% if lazy_load %}lazy{% else %}eager{% endif %}"
        {% if class %}
          class="{{ class }}"
        {% endif -%}
        {% if disable_focal_point == false and image.presentation %}
          style="object-position: {{ image.presentation.focal_point }}"
        {% endif -%}
        width="{{ image_width }}"
        height="{{ image_height }}"
        alt="{{ alt_text | default: image.alt | escape }}"
      >
    </noscript>
  {%- endif -%}
{%- endif -%}
