{%- comment -%}
  This file has been modified by the Yoast SEO for Shopify app.
  You can learn more about this (and learn how to cleanly revert these changes) at https://yoa.st/removing-theme-changes.
{%- endcomment -%}
<!doctype html>
<html lang="{{ request.locale.iso_code }}">
  <head>

<style>html.hide-during-redirect { visibility: hidden }</style>
<script>
(function () {
  // --- KONFIGURATION ---
  // Paths utan Shopify Markets-prefix
  var genericPath  = 'products/products-moisture-wicking-glove-liners-for-sensitive-skin';
  var householdPath = 'products/drye-liner-stops-sweat-from-getting-trapped';
  var mechanicPath  = 'products/drye-glove-liner-prevents-sweat-related-irritation';

  // Map entry keys to destination paths
  var entryMap = {
    household: householdPath,
    mechanic: mechanicPath
  };

  // --- HJÄLPFUNKTIONER ---
  function getMarketsPrefix(pathname) {
    var match = pathname.match(/^\/[a-z]{2}-[a-z]{2}\//);
    return match ? match[0] : '/';
  }

  function normalizePath(pathname) {
    return pathname
      .replace(/^\/[a-z]{2}-[a-z]{2}\//, '')  // Ta bort Shopify Markets-prefix
      .replace(/^\/+|\/+$/g, '');             // Ta bort inledande/avslutande snedstreck
  }

  function getEntryPage() {
    try {
      return localStorage.getItem('entryPage') ||
             (document.cookie.match(/(?:^|;\s*)entryPage=(household|mechanic)/) || [])[1];
    } catch (e) {
      return null;
    }
  }

  function setEntryPage(source) {
    try {
      localStorage.setItem('entryPage', source);
      document.cookie = 'entryPage=' + source + '; path=/; max-age=2592000'; // 30 dagar
    } catch (e) {}
  }

  // --- HUVUDLOGIK ---
  var pathname = location.pathname;
  var path = normalizePath(pathname);
  var prefix = getMarketsPrefix(pathname);

  // Sätt entryPage om det är första gången (på household eller mechanic)
  if (path === householdPath) {
    setEntryPage('household');
  } else if (path === mechanicPath) {
    setEntryPage('mechanic');
  }

  var entry = getEntryPage();

  if (path === genericPath && entry && entryMap[entry]) {
    // Användaren kom via household eller mechanic, men är nu på generic → omdirigera
    document.documentElement.classList.add('hide-during-redirect');
    location.href = prefix + entryMap[entry];
  }
})();
</script>




    <meta name="facebook-domain-verification" content="wfm34x1wbceob0aooivridsrxzce09">

    <script>
      var ahrefs_analytics_script = document.createElement('script');
      ahrefs_analytics_script.async = true;
      ahrefs_analytics_script.src = 'https://analytics.ahrefs.com/analytics.js';
      ahrefs_analytics_script.setAttribute('data-key', '8yq3BY/s4aYD+TTCE4sdGQ');
      document.getElementsByTagName('head')[0].appendChild(ahrefs_analytics_script);
    </script>

    <!-- Hotjar Tracking Code for www.drye.se -->
    <script>
      (function (h, o, t, j, a, r) {
        h.hj =
          h.hj ||
          function () {
            (h.hj.q = h.hj.q || []).push(arguments);
          };
        h._hjSettings = { hjid: 5148037, hjsv: 6 };
        a = o.getElementsByTagName('head')[0];
        r = o.createElement('script');
        r.async = 1;
        r.src = t + h._hjSettings.hjid + j + h._hjSettings.hjsv;
        a.appendChild(r);
      })(window, document, 'https://static.hotjar.com/c/hotjar-', '.js?sv=');
   </script>
<meta charset="utf-8">
<meta http-equiv="X-UA-Compatible" content="IE=edge">
<meta name="viewport" content="width=device-width,initial-scale=1">
<meta name="theme-color" content="">
{%- if settings.favicon != blank -%}
  <link rel="icon" type="image/png" href="{{ settings.favicon | image_url: width: 128, height: 128 }}">
{%- endif -%}

<link rel="canonical" href="{{ canonical_url }}">

<title>{{ page_title }}</title>

{% if page_description %}
  <meta name="description" content="{{ page_description | escape }}">
{% endif %}

{%- render 'theme-meta' -%}
    <script src="{{ 'swiper-bundle.min.js' | asset_url }}" defer="defer"></script>
    {{ 'swiper-bundle.min.css' | asset_url | stylesheet_tag }}
    {%- render 'theme-head-assets' -%}
    {{ content_for_header }}
<!-- Google Tag Manager -->
<script>(function(w,d,s,l,i){w[l]=w[l]||[];w[l].push({'gtm.start':
new Date().getTime(),event:'gtm.js'});var f=d.getElementsByTagName(s)[0],
j=d.createElement(s),dl=l!='dataLayer'?'&l='+l:'';j.async=true;j.src=
'https://www.googletagmanager.com/gtm.js?id='+i+dl;f.parentNode.insertBefore(j,f);
})(window,document,'script','dataLayer','GTM-PZMXP9C');</script>
<!-- End Google Tag Manager -->


    <script type="text/javascript">
      (function (c, l, a, r, i, t, y) {
        c[a] =
          c[a] ||
          function () {
            (c[a].q = c[a].q || []).push(arguments);
          };
        t = l.createElement(r);
        t.async = 1;
        t.src = 'https://www.clarity.ms/tag/' + i;
        y = l.getElementsByTagName(r)[0];
        y.parentNode.insertBefore(t, y);
      })(window, document, 'clarity', 'script', 'r99kaui2gr');
    </script>

    {% if request.path contains '/policies/' %}
      <style>
            .shopify-policy__body {
              max-width: 960px !important;
              margin-left: auto !important;
              margin-right: auto !important;
              padding-left: 64px !important;
              padding-right: 64px !important;
              box-sizing: border-box !important;
              width: 100% !important;
            }

            @media screen and (max-width: 768px) {
              .shopify-policy__body {
                padding-left: 20px !important;
                padding-right: 20px !important;
              }
            }
        .shopify-policy__body ul {
          list-style: disc !important;
          padding-left: 20px !important;
          margin-bottom: 1rem;
          color: #1a1a1a !important;
        }

        .shopify-policy__body li,
        .shopify-policy__body li * {
          font-weight: 200 !important;
          font-style: normal !important;
          color: #1a1a1a !important;
        }


        <style>
          .shopify-policy__body a,
          .rte a,
          .faq .rte a,
          .accordion .rte a,
          .accordion-content a {
            color: #1a0dab !important;
            text-decoration: underline !important;
          }
        </style>
      </style>
    {% endif %}
  </head>
  <body class="{{ page.template_suffix }}__page">

<!-- Google Tag Manager (noscript) -->
<noscript><iframe src="https://www.googletagmanager.com/ns.html?id=GTM-PZMXP9C"
height="0" width="0" style="display:none;visibility:hidden"></iframe></noscript>
<!-- End Google Tag Manager (noscript) -->
    
    <div id="si-overlay" class="overlay"></div>
    {%- sections 'header-group' -%}
    <main>
      {{ content_for_layout }}
    </main>
    <footer>
      {%- sections 'footer-group' -%}
    </footer>

    {%- sections 'popups-group' -%}
    {%- render 'theme-body-assets' -%}
    {%- render 'theme-variables-script' -%}

    <script>
      document.addEventListener('DOMContentLoaded', function () {
        document.querySelectorAll('.submenu-toggle').forEach(function (toggleBtn) {
          toggleBtn.addEventListener('click', function (e) {
            e.preventDefault();
            const parent = this.closest('.mobile-menu-item');
            parent.classList.toggle('active');

            // Toggle +/– symbol
            this.textContent = parent.classList.contains('active') ? '–' : '+';
          });
        });
      });
    </script>

    <!-- Gorgias Chat Widget Start -->
    <script
      id="gorgias-chat-widget-install-v3"
      src="https://config.gorgias.chat/bundle-loader/01JTNG45QZT8DAP1H72K0G5JRM"
    ></script>
    <!-- Gorgias Chat Widget End -->

    <!-- Bundle Start -->
    <script src="https://bundle.dyn-rev.app/loader.js" async></script>
    <!-- Bundle End -->

    <script src="https://unpkg.com/masonry-layout@4/dist/masonry.pkgd.js" defer id="masonry-script"></script>

    <style>
      div#klaviyo-product-reviews-wrapper {
        max-width: 1534px;
        margin: 0 auto;
        padding: 0 64px;
      }

      @media screen and (max-width: 768px) {
        div#klaviyo-product-reviews-wrapper {
          padding: 0 20px;
        }
      }

      .kl_reviews__review_item {
        border: 1px solid #e0e0e0 !important;
        border-radius: 5px;
        transition: box-shadow 0.3s ease-in-out;
        overflow: hidden;
        padding: 20px;
        margin: 0;
      }

      .kl_reviews__review_item:hover {
        box-shadow: 0 5px 11px #e5e5e5;
      }
    </style>
<!-- Stamped -->

<script>function myInit(){ StampedFn.init({
apiKey: '4442485d-59b7-4e2f-8408-907cf26ba3cd',
sId: '353360' }); }</script>


<script async onload="myInit()" type="text/javascript"
src="
https://cdn1.stamped.io/files/widget.min.js
"></script>

<!-- End Stamped --> 
<script>
(function () {
  var eczemaUrl  = '/products/drye-eczema-gloves-for-cracked-and-sensitive-skin';
  var path = location.pathname.replace(/\/+$/,'');
  if (path === eczemaUrl) {
    try {
      localStorage.setItem('entryPage', 'eczema');
      document.cookie = 'entryPage=eczema;path=/;max-age=7200'; // 2h giltighet
    } catch(e){}
  }
})();
</script>



<script>
(function () {
  function getVariantIdFromCustomSelect(form) {
    const cs = form.querySelector('.custom-select');
    if (!cs) return NaN;

    const selectedTitle = cs.querySelector('.selected')?.textContent?.trim();
    if (!selectedTitle) return NaN;

    const opt = Array.from(cs.querySelectorAll('.custom-option')).find(o =>
      (o.dataset?.title?.trim() || o.textContent?.trim()) === selectedTitle
    );
    return Number(opt?.dataset?.value || NaN);
  }

  function resolveVariantId(form) {
    const fromCS = getVariantIdFromCustomSelect(form);
    if (Number.isInteger(fromCS)) return fromCS;

    const radioId = Number(form.querySelector('input[type="radio"][name="id"]:checked')?.value || NaN);
    if (Number.isInteger(radioId)) return radioId;

    const selId = Number(form.querySelector('select[name="id"]')?.value || NaN);
    if (Number.isInteger(selId)) return selId;

    const vr = form.querySelector('variant-radios, variant-selects') ||
               document.querySelector('variant-radios, variant-selects');
    const ceVar = Number(vr?.currentVariant?.id || NaN);
    if (Number.isInteger(ceVar)) return ceVar;

    const urlVar = Number(new URL(location.href).searchParams.get('variant') || NaN);
    if (Number.isInteger(urlVar)) return urlVar;

    const hiddenId = Number(form.querySelector('input[type="hidden"][name="id"]')?.value || NaN);
    if (Number.isInteger(hiddenId)) return hiddenId;

    return NaN;
  }

  document.addEventListener('submit', function (evt) {
    const form = evt.target?.closest("form[action*='/cart/add']");
    if (!form) return;

    const variantId = resolveVariantId(form);
    if (!Number.isInteger(variantId)) return;

    let hid = form.querySelector('input[type="hidden"][name="id"]');
    if (!hid) {
      hid = document.createElement('input');
      hid.type = 'hidden';
      hid.name = 'id';
    }
    hid.value = String(variantId);
    if (form.firstChild !== hid) form.insertBefore(hid, form.firstChild);

    const radio = form.querySelector(`input[type="radio"][name="id"][value="${variantId}"]`);
    if (radio && !radio.checked) {
      radio.checked = true;
      radio.dispatchEvent(new Event('change', { bubbles: true }));
    }
  }, true);
})();
</script>



<script>
(() => {
  'use strict';
  if (window.__TW_ATC_HOOK__) return;
  window.__TW_ATC_HOOK__ = true;

  /* ============= CONFIG ============= */
  const DEDUP_WINDOW_MS = 4000;
  const PIXEL_WAIT_MS   = 10000;
  const CART_RETRIES    = 3;
  const LOG             = true; // выключи на проде

  /* ============= LOG =============== */
  const PFX='[TW ATC]';
  const log = {
    debug: (...a)=>{ if(LOG) try{console.debug(PFX,...a)}catch{} },
    info:  (...a)=>{ if(LOG) try{console.info (PFX,...a)}catch{} },
    warn:  (...a)=>{ if(LOG) try{console.warn (PFX,...a)}catch{} },
    error: (...a)=>{ if(LOG) try{console.error(PFX,...a)}catch{} },
  };

  /* ====== TriplePixel queue ======== */
  const queue = [];
  let waitTimer = null;
  const ready = () => typeof window.TriplePixel === 'function';

  function flush() {
    if (!ready()) return;
    while (queue.length) {
      const {n, p} = queue.shift();
      try { window.TriplePixel(n, p); log.debug('Flushed', n, p); }
      catch (e) { log.error('TriplePixel threw', e); }
    }
    if (waitTimer) { clearInterval(waitTimer); waitTimer = null; }
  }

  function send(name, payload) {
    if (ready()) {
      try { window.TriplePixel(name, payload); log.info('Sent', name, payload); }
      catch (e) { log.error('TriplePixel threw', e); }
      return;
    }
    queue.push({ n: name, p: payload });
    if (!waitTimer) {
      const start = Date.now();
      waitTimer = setInterval(() => {
        if (ready() || Date.now() - start > PIXEL_WAIT_MS) {
          if (!ready()) log.warn('TriplePixel not ready; stop waiting');
          flush();
        }
      }, 150);
    }
  }

  /* ======== cart.token fast ========= */
  let CART_TOKEN = null;

  function readTokenFromCookie() {
    try {
      const m = document.cookie.match(/(?:^|;\s*)cart=([^;]+)/);
      return m ? decodeURIComponent(m[1]) : null;
    } catch { return null; }
  }

  async function getCartToken() {
    if (CART_TOKEN) return CART_TOKEN;

    // 1) моментально из cookie
    const c = readTokenFromCookie();
    if (c) { CART_TOKEN = c; log.debug('token from cookie'); return CART_TOKEN; }

    // 2) из /cart.js с keepalive, чтобы не срезало на закрытии вкладки
    let t = 0;
    while (t < CART_RETRIES) {
      t++;
      try {
        const r = await fetch('/cart.js', {
          credentials: 'same-origin',
          cache: 'no-store',
          keepalive: true
        });
        if (!r.ok) throw new Error('HTTP ' + r.status);
        const cart = await r.json();
        CART_TOKEN = cart?.token || readTokenFromCookie() || null;
        if (CART_TOKEN) log.debug('token from /cart.js');
        return CART_TOKEN;
      } catch (e) {
        const d = Math.min(1500, 200 * 2 ** (t - 1));
        log.warn(`cart.js failed #${t}, retry in ${d}ms`, e);
        await new Promise(res => setTimeout(res, d));
      }
    }
    return null;
  }

  /* ============ Dedup ============== */
  const fpTimes = new Map(); // "id::qty" -> ts
  const mk = (id, q) => `${id}::${q||1}`;
  function dedup(id, qty) {
    const now = Date.now(), key = mk(id, qty), last = fpTimes.get(key) || 0;
    if (now - last < DEDUP_WINDOW_MS) return true;
    fpTimes.set(key, now);
    for (const [k,t] of fpTimes) if (now - t > DEDUP_WINDOW_MS*3) fpTimes.delete(k);
    return false;
  }

  /* ======== Parse bodies =========== */
  async function parseItems(body) {
    try {
      if (typeof FormData !== 'undefined' && body instanceof FormData) {
        const idxs = new Set([...body.keys()].map(k => (k.match(/^items\[(\d+)\]\[id\]$/)||[])[1]).filter(Boolean));
        if (idxs.size) {
          const out = [];
          idxs.forEach(i => {
            const id = body.get(`items[${i}][id]`);
            const q  = parseInt(body.get(`items[${i}][quantity]`) || '1', 10) || 1;
            if (id) out.push({ id: String(id), quantity: q });
          });
          if (out.length) return out;
        }
        const id = body.get('id') || body.get('variant_id') || body.get('variantId');
        const q  = parseInt(body.get('quantity') || body.get('qty') || '1', 10) || 1;
        if (id) return [{ id: String(id), quantity: q }];
      }
      if (typeof URLSearchParams !== 'undefined' && body instanceof URLSearchParams) {
        const id = body.get('id') || body.get('variant_id') || body.get('variantId');
        const q  = parseInt(body.get('quantity') || body.get('qty') || '1', 10) || 1;
        if (id) return [{ id: String(id), quantity: q }];
      }
      if (typeof body === 'string') {
        try {
          const data = JSON.parse(body);
          if (Array.isArray(data?.items)) {
            return data.items.map(it => ({
              id: String(it.id || it.variant_id),
              quantity: parseInt(it.quantity || 1, 10) || 1
            })).filter(it => it.id);
          }
          if (data && (data.id || data.variant_id)) {
            return [{ id: String(data.id || data.variant_id), quantity: parseInt(data.quantity || 1, 10) || 1 }];
          }
        } catch {}
      }
    } catch (e) { log.warn('parseItems error', e); }
    return [];
  }

  /* ======== Emit AddToCart ========= */
  async function emitATC(items) {
    if (!items?.length) return;
    const token = await getCartToken(); // если нет — пошлём без него
    items.forEach(({ id, quantity }) => {
      const q = parseInt(quantity || 1, 10) || 1;
      if (dedup(id, q)) { log.debug('dedup skip', id, q); return; }
      const payload = { item: String(id), q };
      if (token) payload.token = token;
      send('AddToCart', payload);
    });
  }

  /* ============ URL match =========== */
  function isATCUrl(input) {
    try {
      const u = typeof input==='string' ? new URL(input, location.origin)
                                        : new URL(input?.url || String(input), location.origin);
      return /\/cart\/add(\.js|\.json)?$/.test(u.pathname);
    } catch {
      return typeof input==='string' && /\/cart\/add/.test(input);
    }
  }

  /* ============ Patch fetch ========== */
  const _fetch = window.fetch;
  window.fetch = async function twFetch(input, init = {}) {
    const atc = isATCUrl(typeof input==='string' ? input : (input?.url || ''));
    let clone = null;

    if (atc) {
      const b = init?.body;
      if (b instanceof FormData)        { clone = new FormData(); for (const [k,v] of b.entries()) clone.append(k,v); }
      else if (b instanceof URLSearchParams) { clone = new URLSearchParams(b.toString()); }
      else if (typeof b === 'string')   { clone = String(b); }

      // оптимистично ДО запроса
      try { const items = await parseItems(clone); emitATC(items); } catch(e){ log.warn('pre-fetch emit error', e); }
    }

    const resp = await _fetch.apply(this, arguments);

    // подтверждение ПОСЛЕ ответа (дедуп снимет дубль)
    try { if (atc && resp?.ok && clone) { const items = await parseItems(clone); await emitATC(items); } }
    catch (e) { log.warn('fetch hook post-emit error', e); }

    return resp;
  };

  /* ============ Patch XHR ============ */
  const _XHR = window.XMLHttpRequest;
  function PatchedXHR() {
    const xhr = new _XHR();
    let _url = '', _method = 'GET', _body = null;

    const open = xhr.open;
    xhr.open = function(method, url) {
      _method = (method || 'GET').toUpperCase();
      _url = url;
      return open.apply(xhr, arguments);
    };

    const send = xhr.send;
    xhr.send = function(body) {
      _body = body;

      try {
        if (_method === 'POST' && isATCUrl(_url)) {
          parseItems(_body).then(items => emitATC(items)).catch(()=>{});
        }
      } catch {}

      xhr.addEventListener('load', async () => {
        try {
          if (_method === 'POST' && isATCUrl(_url) && xhr.status >= 200 && xhr.status < 300) {
            const items = await parseItems(_body);
            await emitATC(items);
          }
        } catch (e) { log.warn('xhr hook post-emit error', e); }
      });

      return send.apply(xhr, arguments);
    };
    return xhr;
  }
  window.XMLHttpRequest = PatchedXHR;

  /* ========== Fallback submit ========= */
  document.addEventListener('submit', async (evt) => {
    const form = evt.target?.closest("form[action*='/cart/add']");
    if (!form) return;
    try { const fd = new FormData(form); const items = await parseItems(fd); await emitATC(items); }
    catch (e) { log.warn('submit fallback error', e); }
  }, true);

  /* ======== Hook на on:cart:add ====== */
  document.addEventListener('on:cart:add', (e) => {
    try {
      const v = e?.detail?.variantId, q = e?.detail?.quantity || 1;
      if (v) emitATC([{ id: v, quantity: q }]);
    } catch (_) {}
  });

  /* ===== Flush при закрытии вкладки ==== */
  window.addEventListener('pagehide', () => { try { flush(); } catch{} }, { capture: true });

  log.info('TW AddToCart interceptor installed');
})();
</script>







<!--Convert Bundle Start-->
<script id="convert-bundle-loader" src="https://bundle.5gtb.com/loader.js?g_cvt_id=43d6a6b5-1dcc-4430-aaf9-153ca1c9a0bb"></script>
<!--Convert Bundle End-->


  </body>
</html>
